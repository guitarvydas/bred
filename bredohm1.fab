Bred {
  main [spaces1 firstPattern spaces2 secondPattern spaces3] = ‛
Run {
«spaces1»«firstPattern»«spaces2»«secondPattern»«spaces3»
’


  firstPattern [lq firstitem+ rq] = ‛
  top = main+
  main = spaces matchLR spaces
  char =  ~space ~literal ~bracket ~connector any

  matchLR =
    | item+ "⇉" item+ -- connected
    | space+ -- atLeastOneSpace
    | patternLR -- pattern
    | "(" matchLR* ")" -- paren
    | "{" matchLR* "}" -- brace
    | "[" matchLR* "]" -- squarebracket
    | "<" matchLR* ">" -- anglebracket
    | "❲" matchLR* "❳" -- namebracket
    | "\«" matchLR* "\»" -- varbracket
    | "⟨" matchLR* "⟩" -- dtypebracket
    | "⟪" matchLR* "⟫" -- messagebracket
    | "⎨" matchLR* "⎬" -- connectionbracket
    | "⎡" matchLR* "⎤" -- sender
    | "⎣" matchLR* "⎦" -- receiver
    | char+ -- char


  bracket =
    | "(" | ")" | "{" | "}" | "[" | "]" | "<" | ">"
    |  "❲" |  "❳" |  "«" | "»" | "⟨" |  "⟩" | "⟪" | "⟫"
    | "⎨" | "⎬" | "⎡"| "⎤" | "⎣" | "⎦"

  connector =
    | "⇉"

  item = spaces matchLR spaces

patternLR = «firstitem»

’

  firstitem_variable [lq name rq] = ‛ item ’
  firstitem_space [c] = ‛’
  firstitem_characters [c+] = ‛ "«c»" ’
  secondPattern [lq seconditem+ rq] = ‛’
  seconditem_variable [lq name rq] = ‛’
  seconditem_space [c] = ‛’
  seconditem_characters [c+] = ‛’

  name [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’
  nameFirst [letter] = ‛«letter»’
  nameRest [alnum] = ‛«alnum»’
}


