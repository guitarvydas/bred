Bred {
  main [spaces1 firstPattern spaces2 secondPattern spaces3] = ‛
NestingGrammar {

  topLevel [items+] = \‛\«items\»\’
  
  item_pattern [p] = \‛\«p\»\’
  item_variable [v] = \‛\«v\»\’
  item_bracketed [b] = \‛\«b\»\’
  item_spaces [s] = \‛\«s\»\’
  item_chars [c] = \‛\«c\»\’

  runOfSpaces [s+] = \‛\«s\»\’
  runOfUninterestingChars [cs+] = \‛\«cs\»\’
  uninterestingChar [c] = \‛\«c\»\’

  variable [lb name rb] = \‛\\\\\«\«name\»\\\\\»\’
  bracket [c] = \‛\«c\»\’
  // bracketed [x] ... handled implicitly by Ohm-JS
  brack [lb item+ rb] = \‛\«item\»\’
  name [n] = \‛\«n\»\’
  bracketedName [lb cs+ rb] = \‛❲\«cs\»❳\’
  classicName [nFirst nRest*] = \‛\«nFirst\»\«nRest\»\’
  nameFirst [c] = \‛\«c\»\’
  nameRest [c] = \‛\«c\»\’

  literal [c] = \‛\«c\»\’

’

  firstPattern [lq firstitem+ rq] = ‛«firstitem» ’
  firstitem_variable [lq name rq] = ‛ spitemsp ’
  firstitem_space [c] = ‛’
  firstitem_character [c] = ‛ "«c»" ’
  secondPattern [lq seconditem+ rq] = ‛’
  seconditem_variable [lq name rq] = ‛’
  seconditem_space [c] = ‛’
  seconditem_character [c] = ‛’

  name [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’
  nameFirst [letter] = ‛«letter»’
  nameRest [alnum] = ‛«alnum»’
}


