NestingGrammar {

// test: a b c
// test: ( d e f )
// test: a b c ( d e f )
// test: a b c ( d e f ) g h i
// test: ⟪◦o ϕ š m⟫
// test: ⎨▫down (š ✕in) (❲leaf 1❳ ✕in)⎬
// test: ⎨x (š y) (z w)⎬
// test: a(d)
//
// test: ⎨in ⇓ ❲leaf 1❳ in⎬
// test: a b c ⎨in ⇓ ❲leaf 1❳ in⎬ g h i
//
// test:  ⎨❲leaf 1❳ out ⇑ out⎬
// test: ⎨❲leaf 1❳ ✕in ⇒ ❲leaf 2❳ ✕in⎬
// test: ⎨✕in ⤻ out⎬
//
// test: ⎨✕in ⇓ ❲leaf 1❳ ✕in⎬
// test:  ⎨❲leaf 1❳ ▫out ⇑ ▫out⎬
// test: ⎨❲leaf 1❳ ▫out ⇒ ❲leaf 2❳ ✕in⎬
// test: ⎨✕in ⤻ ▫out⎬
//

  topLevel = topLevelItemSpace+
  topLevelItemSpace = topLevelItem spaces
  topLevelItem = 
    | runOfNonBrackets bracketed topLevel  -- rnbbt
    | runOfNonBrackets bracketed           -- rnbb
    | bracketed                            -- b
    | runOfNonBrackets                     -- rnb

  runOfNonBrackets = (~bracket any)+
  
  bracketed =
  | pattern        -- pattern
  | builtinBracket -- bib

  builtinBracket =
  | brack<"(", ")"> -- ii1
  | brack<"{", "}"> -- ii2
  | brack<"[", "]"> -- ii3
  | brack<"<", ">"> -- ii4
  | brack<"❲", "❳"> -- ii5
  | brack<"«", "»"> -- ii6
  | brack<"⟨", "⟩"> -- ii7
  | brack<"⟪", "⟫"> -- ii8
  | brack<"⎨", "⎬"> -- ii9
  | brack<"⎡", "⎤"> -- ii10
  | brack<"⎣", "⎦"> -- ii11

  brack<lb,rb> =
    | lb itemsWithSpaces spaces rb spaces -- ii1a
    | lb spaces rb spaces -- ii1b
    | lb rb spaces -- ii1c

  itemsWithSpaces = itemWithSpaces+
  itemWithSpaces = spaces item

  item =
    | bracketed
    | connector
    | runOfUninterestingChars

  runOfUninterestingChars = uninterestingChar+
  uninterestingChar = ~literal ~space ~bracket ~connector any

  innerItem =
    | bracketed
    | runOfUninterestingChars
    
  innerItems = spaces innerItemSpaces*
  innerItemSpaces = innerItem spaces

  bracket =
    | "(" | ")" | "{" | "}" | "[" | "]" | "<" | ">"
    |  "❲" |  "❳" |  "«" | "»" | "⟨" |  "⟩" | "⟪" | "⟫"
    | "⎨" | "⎬" | "⎡"| "⎤" | "⎣" | "⎦"

  connector =
    | "⇉" | "⇓" | "⇑" | "⇒" | "⤻"

patternLR1 =  "⟪"  spitem  spitem  spitem  spitem  spaces "⟫"
spitem = itemWithSpaces
spitemsp = itemWithSpaces spaces
patternLR2 = "⎨" spitemsp "⇓" spitemsp spitemsp"⎬"
patternLR3 = "⎨" spitemsp spitemsp "⇑" spitemsp"⎬"
patternLR4 = "⎨" spitemsp spitemsp "⇒" spitemsp spitemsp "⎬"
patternLR5 = "⎨" spitemsp "⤻" spitemsp "⎬"
literal1 =  | "⟪"  | item  | item  | item  | item  | "⟫" 

pattern = patternLR3
literal = literal1
}
