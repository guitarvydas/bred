
NestingGrammar {

  topLevel = item+
  item =
    | pattern   -- pattern
    | container -- container
    | leaf      -- leaf
    | space     -- whitespace

  iteminpattern =
    | container -- container
    | uninterestingChar+      -- leaf

  leaf = space* uninterestingChar+ space* uninterestingChar*
  container = bracketed

  runOfSpaces = space+
  runOfUninterestingChars = uninterestingChar+
  uninterestingChar = ~pattern ~bracket ~space any
  
  bracket =
    | "(" | ")" | "{" | "}" | "[" | "]" | lt | gt
    |  "❲" |  "❳" |  "«" | "»" | "⟨" |  "⟩" | "⟪" | "⟫"
    | "⎨" | "⎬" | "⎡"| "⎤" | "⎣" | "⎦"
    | "“" |  "”"
  bracketed =
    | brack<"(", ")"> -- br1
    | brack<"{", "}"> -- br2
    | brack<"[", "]"> -- br3
    | brack<lt, gt> -- br4
    | brack<"❲", "❳"> -- br5
    | brack<"⟨", "⟩"> -- br6
    | brack<"⟪", "⟫"> -- br7
    | brack<"⎨", "⎬"> -- br8
    | brack<"⎡", "⎤"> -- br9
    | brack<"⎣", "⎦"> -- br10
    | brack<"«", "»"> -- br11
    | verbatim -- br12

  verbatim = "“" (~"”" any)* "”"

  brack<lb,rb> = lb item* rb
  name = bracketedName | classicName
  bracketedName = "❲" (~"❳" any)+ "❳"
  classicName = nameFirst nameRest*
  nameFirst = letter | "_"
  nameRest = alnum | nameFirst

  lt = ~angleprefix "<" ~anglesuffix
  gt = ~angleprefix ">" ~anglesuffix
  angleprefix = "=" | "<" | ">"
  anglesuffix = "=" | "<" | ">"

  pattern = "⟪" iteminpattern " " iteminpattern " " iteminpattern " " iteminpattern "⟫" 
  literal = | "⟪" | " " | " " | " " | "⟫" | bracket
}
