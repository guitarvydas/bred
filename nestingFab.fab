NestingGrammar {

// test: a b c
// test: ( d e f )
// test: a b c ( d e f )
// test: a b c ( d e f ) g h i
// test: ⟪◦o ϕ š m⟫
// test: ⎨▫down (š ✕in) (❲leaf 1❳ ✕in)⎬
// test: ⎨x (š y) (z w)⎬
// test: a(d)
//
// test: ⎨in ⇓ ❲leaf 1❳ in⎬
// test: a b c ⎨in ⇓ ❲leaf 1❳ in⎬ g h i
//
// test:  ⎨❲leaf 1❳ out ⇑ out⎬
// test: ⎨❲leaf 1❳ ✕in ⇒ ❲leaf 2❳ ✕in⎬
// test: ⎨✕in ⤻ out⎬
//
// test: ⎨✕in ⇓ ❲leaf 1❳ ✕in⎬
// test:  ⎨❲leaf 1❳ ▫out ⇑ ▫out⎬
// test: ⎨❲leaf 1❳ ▫out ⇒ ❲leaf 2❳ ✕in⎬
// test: ⎨✕in ⤻ ▫out⎬
//

  topLevel_rnbbt [rnb b t] = ‛«rnb»«b»«t»’
  topLevel_rnbb [rnb b] = ‛«rnb»«b»’
  topLevel_b [b] = ‛«b»’
  topLevel_rnb [rnb] = ‛«rnb»’

  runOfNonBrackets [cs+] = ‛«cs»’
  
  bracketed_pattern [p] = ‛«p»’
  bracketed_bib [b] = ‛«b»’

  builtinBracket [x] = ‛«x»’

  brack_ii1a [lb itemsWithSpaces spaces rb spaces2] = ‛«lb»«itemsWithSpaces»«spaces»«rb»«spaces2»’
  brack_ii1b [lb spaces rb spaces2] = ‛«lb»«spaces»«rb»«spaces2»’
  brack_ii1c [lb rb spaces2] = ‛«lb»«rb»«spaces2»’

  itemsWithSpaces [itemWithSpaces+] = ‛«itemWithSpaces»’
  itemWithSpaces [spaces item] = ‛«spaces»«item»’

  item [i] = ‛«i»’

  runOfUninterestingChars [uninterestingChar+] = ‛«uninterestingChar»’
  uninterestingChar [c] = ‛«c»’

  innerItem [i] = ‛«i»’
    
  innerItems [spaces innerItemSpaces*] = ‛«spaces»«innerItemSpaces»’
  innerItemSpaces [innerItem spaces] = ‛«innerItem»«spaces»’

  bracket [b] = ‛«b»’
  connector [c] = ‛«c»’

patternLR1 [lb  spitem1  spitem2  spitem3  spitem4  spaces rb] = ‛«lb»«spitem1»«spitem2»«spitem3»«spitem4»«spaces»«rb»’
spitem [itemWithSpaces] = ‛«itemWithSpaces»’
spitemsp [itemWithSpaces spaces] = ‛«itemWithSpaces»«spaces»’
patternLR2 [lb spitemsp down spitemsp2 spitemsp3 rb] = ‛«lb»«spitemsp»«down»«spitemsp2»«spitemsp3»«rb»’
patternLR3 [lb spitemsp spitemsp2 up spitemsp3 rb]=  ‛«lb»«spitemsp»«spitemsp2»«down»«spitemsp3»«rb»’
patternLR4 [lb spitemsp spitemsp2 across spitemsp3 spitemsp4 rb]= ‛«lb»«spitemsp»«spitemsp2»«across»«spitemsp3»«spitemsp4»«rb»’
patternLR5 [lb spitemsp through spitemsp2 rb] = ‛«lb»«spitemsp»«through»«spitemsp2»«rb»’
literal1 [x] = ‛«x»’

pattern [p] = ‛«p»’
literal [L] = ‛«L»’
}
